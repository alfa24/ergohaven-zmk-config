#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
        };
    };

    combos {
        compatible = "zmk,combos";

        mouse {
            bindings = <&mo 6>;
            key-positions = <3 4>;
            layers = <1 6 0 8>;
        };

        sniper {
            bindings = <&mo 8>;
            key-positions = <27 28>;
            layers = <1 0 6 8>;
        };

        adj {
            bindings = <&mo 5>;
            key-positions = <41 42>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(CAPSLOCK)>;
            label = "TO_RU";
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK>;
            label = "TO_EN";
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_ru>,
                <&macro_wait_time 10>;

            label = "EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC     &kp Q           &kp W           &kp E        &kp R             &kp T                                        &kp Y        &kp U             &kp I        &kp O           &kp P              &kp BSPC
&kp TAB     &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G                                        &kp H        &mt LEFT_SHIFT J  &mt LCTRL K  &mt LEFT_ALT L  &mt LEFT_WIN SEMI  &kp BSLH
&caps_word  &kp Z           &kp X           &kp C        &kp V             &kp B                                        &kp N        &kp M             &kp COMMA    &kp DOT         &kp SQT            &kp DOT
                            &kp CAPSLOCK    &layer_ru    &lt 9 BACKSPACE   &lt 10 DELETE  &lt 11 ESCAPE    &lt 6 ENTER  &lt 3 SPACE  &mo 6             &kp LBKT     &kp RBKT
            >;

            display-name = "en";
        };

        ru {
            display-name = "ru";
            bindings = <
&kp ESC     &kp RU_CYRILLIC_SHORT_I      &kp RU_CYRILLIC_TSE            &kp RU_CYRILLIC_U         &kp RU_CYRILLIC_KA            &kp RU_CYRILLIC_IE                             &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE           &kp RU_CYRILLIC_SHA       &kp RU_CYRILLIC_SHCHA        &kp RU_CYRILLIC_ZE            &kp BSPC
&kp TAB     &mt LEFT_WIN RU_CYRILLIC_EF  &mt LEFT_ALT RU_CYRILLIC_YERU  &mt LCTRL RU_CYRILLIC_VE  &mt LEFT_SHIFT RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                             &kp RU_CYRILLIC_ER  &mt LEFT_SHIFT RU_CYRILLIC_O  &mt LCTRL RU_CYRILLIC_EL  &mt LEFT_ALT RU_CYRILLIC_DE  &mt LEFT_WIN RU_CYRILLIC_ZHE  &kp BSLH
&caps_word  &kp RU_CYRILLIC_YA           &kp RU_CYRILLIC_CHE            &kp RU_CYRILLIC_ES        &kp RU_CYRILLIC_EM            &kp RU_CYRILLIC_I                              &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN     &kp RU_CYRILLIC_BE        &kp RU_CYRILLIC_YU           &kp RU_CYRILLIC_E             &kp RU_DOT
                                         &kp CAPSLOCK                   &layer_en                 &lt 9 BACKSPACE               &lt 10 DELETE       &lt 11 ESC    &lt 6 ENTER  &lt 4 SPACE         &mo 6                         &kp RU_CYRILLIC_HA        &kp RU_CYRILLIC_HARD_SIGN
            >;
        };

        nav {
            bindings = <
&trans  &kp N1  &kp N2    &kp N3   &kp N4   &kp N5                     &kp N6    &kp N7        &kp N8         &kp N9       &kp N0         &trans
&trans  &trans  &trans    &trans   &trans   &kp RET                    &trans    &kp LEFT      &kp DOWN       &kp UP       &kp RIGHT      &trans
&trans  &trans  &kp HOME  &kp INS  &kp END  &kp DEL                    &kp CLCK  &kp LC(LEFT)  &kp PAGE_DOWN  &kp PAGE_UP  &kp LC(RIGHT)  &trans
                &trans    &trans   &trans   &trans   &trans    &trans  &mo 5     &trans        &trans         &trans
            >;

            display-name = "nav";
        };

        sym {
            bindings = <
&trans  &kp HASH   &kp LT    &kp EQUAL  &kp GT    &kp GRAVE                    &kp CARET  &kp DQT   &kp UNDER  &kp SQT   &trans    &trans
&trans  &kp BSLH   &kp LPAR  &kp MINUS  &kp RPAR  &kp PLUS                     &kp PRCNT  &kp LBRC  &kp SEMI   &kp RBRC  &kp EXCL  &kp QUESTION
&trans  &kp COMMA  &kp STAR  &kp COLON  &kp FSLH  &kp DLLR                     &kp AT     &kp PIPE  &kp TILDE  &kp AMPS  &kp DOT   &trans
                   &trans    &trans     &trans    &mo 5      &trans    &trans  &trans     &trans    &kp LBKT   &kp RBKT
            >;

            display-name = "sym";
        };

        sym_ru {
            display-name = "sym_ru";
            bindings = <
&kp RU_CYRILLIC_IO  &en HASH          &en LT    &kp EQUAL     &en GT       &en GRAVE                    &en CARET  &kp RU_DQT  &kp UNDER    &en SQT   &trans      &trans
&kp RU_NUMERO       &kp RU_BACKSLASH  &kp LPAR  &kp MINUS     &kp RPAR     &kp PLUS                     &kp PRCNT  &en LBRC    &kp RU_SEMI  &kp RBRC  &kp EXCL    &kp RU_QMARK
&trans              &kp RU_COMMA      &kp STAR  &kp RU_COLON  &kp RU_FSLH  &en DLLR                     &en AT     &en PIPE    &en TILDE    &en AMPS  &kp RU_DOT  &trans
                                      &trans    &trans        &trans       &mo 5      &trans    &trans  &trans     &trans      &en LBKT     &en RBKT
            >;
        };

        adj {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            display-name = "adj";
        };

        mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                   &trans    &trans    &trans    &trans    &trans  &trans
&trans  &mo 7   &mkp MB3  &mkp MB2  &mkp MB1  &mo 8                    &mo 8     &mkp MB1  &mkp MB2  &mkp MB3  &mo 7   &trans
&trans  &trans  &trans    &trans    &trans    &trans                   &mkp MB1  &mkp MB3  &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &mo 6  &mo 7     &trans    &mkp MB2  &trans
            >;
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                   &trans    &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                   &trans    &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                   &mkp MB1  &mkp MB3  &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &mo 8  &mo 7     &trans    &mkp MB2  &trans
            >;
        };

        cursor {
            bindings = <
&trans     &trans        &trans     &trans     &trans     &kp LC(F5)                     &trans  &kp HOME  &kp UP    &kp END    &kp PG_UP  &trans
&kp LC(A)  &kp LG(LGUI)  &kp LALT   &kp LCTRL  &kp LSHFT  &trans                         &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &trans
&trans     &kp LC(Z)     &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans                         &trans  &trans    &trans    &trans     &trans     &trans
                         &trans     &kp LS(D)  &trans     &trans      &trans    &kp RET  &trans  &trans    &trans    &trans
            >;
        };

        number {
            bindings = <
&trans  &trans        &trans    &trans     &trans     &trans                       &trans   &kp N7  &kp N8                &kp N9                 &trans  &trans
&trans  &kp LG(LGUI)  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                       &trans   &kp N4  &kp N5                &kp N6                 &trans  &trans
&trans  &trans        &trans    &trans     &trans     &trans                       &trans   &kp N1  &kp N2                &kp N3                 &trans  &trans
                      &trans    &trans     &trans     &trans  &trans    &kp COMMA  &kp DOT  &kp N0  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
            >;
        };

        function {
            bindings = <
&trans  &trans        &trans    &trans     &trans     &studio_unlock                        &trans             &kp F7           &kp F8  &kp F9  &kp F10  &trans
&trans  &kp LG(LGUI)  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                &trans             &kp F4           &kp F5  &kp F6  &kp F11  &trans
&trans  &trans        &trans    &trans     &trans     &trans                                &trans             &kp F1           &kp F2  &kp F3  &kp F12  &trans
                      &trans    &trans     &trans     &trans          &trans    &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &trans
            >;
        };
    };
};

&trackball { cpi = <1000>; };

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <7>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <8>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
